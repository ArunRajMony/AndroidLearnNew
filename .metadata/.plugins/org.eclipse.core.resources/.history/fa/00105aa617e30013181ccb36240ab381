package com.sirpum.audme.android;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Set;
import java.util.UUID;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v7.app.ActionBarActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.GridView;
import android.widget.Toast;

public class MainActivity extends ActionBarActivity {

	
	final static String TAG="VideoconApp203";
	
	static BroadcastReceiver s_Receiver = null;

	static final int REQUEST_ENABLE_BT = 999; 
	static final String BT_DEVICE_NAME = "RNBT-3323";
	static String BT_DEVICE_MAC_Address;
	static boolean BT_DEVICE_Connected = false;
	
	static InputStream s_BTinputStream = null;
	static OutputStream s_BTOutputStream = null;


	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		Log.i(TAG, "onCreate called ###");
		
		setContentView(R.layout.fragment_main); // always use the fragment one
												// and not the "activity" one

		GridView gridview = (GridView) findViewById(R.id.gridview);
		gridview.setAdapter(new ImageAdapter(this));
		       
		/*
		if(getFragmentManager().findFragmentById(R.layout.fragment_main) != null){
		
			Log.i(TAG, "setting to true ....");
			getFragmentManager().findFragmentById(R.layout.fragment_main).setRetainInstance(true);
			
		}
		*/
		
		/*
		 * Bluetooth stuff
		 */
		if(!BT_DEVICE_Connected){ //this if condition is needed as this method onCreate seems to be called whenever the mobile screen's orientation is changed
			
			setupBluetooth();
			
			if(BT_DEVICE_Connected){
				Toast.makeText(MainActivity.this, "Connected to BT device",
						Toast.LENGTH_LONG).show();
			}else{
				Toast.makeText(MainActivity.this, "Could NOT connect to BT device",
						Toast.LENGTH_LONG).show();
			}
		}
		
		
		/*
		 * Listener for listening to user selecting a channel on the App screen
		 */
		gridview.setOnItemClickListener(new OnItemClickListener() {
			public void onItemClick(AdapterView<?> parent, View v,
					int position, long id) {
				
				//retrieve tag for the selected view (channel image icon)
				
				Object tag = v.getTag();
				ChannelBasicDetail chB=null;
				
				if(tag instanceof ChannelBasicDetail)
					chB = (ChannelBasicDetail)tag;
				
				Log.i(TAG, "Channel change triggered by user, going to send signal to BT device : " +chB.channelNumber);
				sendChannelChangeDetailsToBT(chB.channelNumber);
				
				String displayString = "Ch  : " + chB.channelNumber + " ; "+ chB.channelName ;
				if(chB.getCategories() != null)
					for(ChannelCategory chCat : chB.getCategories())
						displayString += " ; " + chCat.toString();
					
				
				Toast.makeText(MainActivity.this, displayString,
						Toast.LENGTH_SHORT).show();
				
				
			}

			
		});
	}

	
	/*
	 * the main bluetooth related method.this is the one which triggers all set-up and initilization with reagrds to Bluetooth
	 */
	private  void setupBluetooth() {
		final BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
		if (bluetoothAdapter == null) {
			Log.w(TAG,"the device does not suport bluetooth");

		}else
			Log.i(TAG,"supports BLUETOOTH ##########");
		
		if (!bluetoothAdapter.isEnabled()) {
		    Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
		    startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
		}
		
		Set<BluetoothDevice> pairedDevices = bluetoothAdapter.getBondedDevices();
		// If there are paired devices
		if (pairedDevices.size() > 0) {
		    // Loop through paired devices
		    for (BluetoothDevice device : pairedDevices) {
		        // Add the name and address to an array adapter to show in a ListView
		        //mArrayAdapter.add(device.getName() + "\n" + device.getAddress());
		    	
               Log.i(TAG,"Device details : "+ device.getName() + "    ;    " + device.getAddress() +"\n");		 
               if(device.getName().trim().equals(BT_DEVICE_NAME))
            	   BT_DEVICE_MAC_Address = device.getAddress();

		    }
		}
		
		
		Log.i(TAG, "BT_DEVICE_NAME            : " + BT_DEVICE_NAME);
		Log.i(TAG, "BT_DEVICE_MAC_Address : " + BT_DEVICE_MAC_Address);
		
		
		// Create a BroadcastReceiver for ACTION_FOUND
		 s_Receiver = new BroadcastReceiver() {
		    public void onReceive(Context context, Intent intent) {
		        String action = intent.getAction();
		        // When discovery finds a device
		        if (BluetoothDevice.ACTION_FOUND.equals(action)) {
		        	
		            // Get the BluetoothDevice object from the Intent
		            BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
		        	Log.i(TAG, "Device Discovered : " +device.getName() + "\t" + device.getAddress());
		        	
		            if(device.getName().equals(BT_DEVICE_NAME)){
		            	Log.i(TAG, "Cancelling Discovery before trying to connect ");
			            bluetoothAdapter.cancelDiscovery();
			            
			            if(! BT_DEVICE_Connected){
			            	Log.i(TAG, "Going to try connecting to the BT device from BroadcastReceiver.onReceive method");
			            	//connectToKnownArduinoBT();// needed ??
			            }
		            }
		        }
		    }

		
		};
		// Register the BroadcastReceiver
		IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_FOUND);
		registerReceiver(s_Receiver, filter); // Don't forget to unregister during onDestroy
		
		bluetoothAdapter.startDiscovery();

		 if(! BT_DEVICE_Connected){
         	Log.i(TAG, "Going to try connecting to the BT device from the outiside method");
         	int tryCount = 0;
         	
         	while(true){
         		tryCount ++;
         		
         		if(tryCount > 3){
         			Log.e(TAG, "could not connect to the BT device even after three times..");
         			break;
         		}
         		Log.i(TAG, "Trying to connect to BT device. Attempt # " + tryCount);
         		if(connectToKnownArduinoBT())
         			break;
         		
         		try {
					Thread.sleep(1000); //sleep for one second btw each try
				} catch (InterruptedException e) {
					Log.e(TAG, "Exception ",e);
				}
         	}
         }
	
		
		
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		Log.i(TAG, "inside onDestroy()");
        
		
	}


	

	//Name : RNBT-3323 
	//MAC address : 00:06:66:66:33:23
	//Pair code : 
	
	private boolean connectToKnownArduinoBT(){

		
		BluetoothDevice macBluetoothDevice = BluetoothAdapter.getDefaultAdapter().getRemoteDevice(BT_DEVICE_MAC_Address);
		//This UUIS was got from http://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#createRfcommSocketToServiceRecord(java.util.UUID) 
		// The UUID is a general one for all Bluetooth Serial device :) .. thanks to Android documentation 
		UUID uuidforBTSerial = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");
		
		try {
			Log.i(TAG, "going to create connection with BT device " + macBluetoothDevice);
			BluetoothSocket clientSocket = macBluetoothDevice.createRfcommSocketToServiceRecord(uuidforBTSerial);
			Log.i(TAG, clientSocket.getRemoteDevice().getName());
			s_BTinputStream = clientSocket.getInputStream();
			clientSocket.connect();
			if(clientSocket.isConnected()){
				BT_DEVICE_Connected = true;
				Log.i(TAG, "connected with remote BT device ");
				//start the listening thread if the android application decides to receive anything from the BT device. in our case not yet ..not yet 
				Thread t = new Thread(new MyBluetoothListener());
				t.start();
				
				//write something once to the BT device
			    s_BTOutputStream = clientSocket.getOutputStream();
			    //s_BTOutputStream.write("from the Android app".getBytes());
			}
			else
				Log.w(TAG, "could not connect to BT device ");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			Log.e(TAG, "Exception here : ", e);
			//e.printStackTrace();
			
		}
		
		return BT_DEVICE_Connected;
		
	}
	
	
	private static  void sendChannelChangeDetailsToBT(int channelNumber) {
		
		String data = "A"+channelNumber+"B"; //A and B are the beginning  and end characters , basically these two chars ad the channel # ..just to have a format 
		if(s_BTOutputStream != null){
			try {
				s_BTOutputStream.write(data.getBytes());
				s_BTOutputStream.flush();
				Log.i(TAG, "succesfully sent info over BT for channel change : "+ data);
			} catch (IOException e) {
		        Log.e(TAG, "Exception while trying to send data to BT device  ", e);
			}
			
		}else{
			Log.e(TAG, "Channel change could not be communicated as the BT's outputstream is null");
			//TODO : should try re-connecting to BT device here in that case 
		}
			
		
	}
	
	class MyBluetoothListener implements Runnable{

		@Override
		public void run() {
			
			try {
				Thread.sleep(1000); // sleep for some seconds ..1 sec ? for every run of the loop : save resources :) 
			} catch (InterruptedException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			while(true){
				try {
					if(s_BTinputStream.available() > 0){
						byte[] byteAr = new byte[s_BTinputStream.available()];
						s_BTinputStream.read(byteAr);
						Log.i(TAG, "Data Received : " + new String(byteAr));
						
					}
				} catch (IOException e) {
					// TODO Auto-generated catch block
					Log.e(TAG, "inside the listening thread ",e);
					e.printStackTrace();
				}
				
			}
			
			
		}
		
		
	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {

		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	/**
	 * A placeholder fragment containing a simple view.
	 */
	public static class PlaceholderFragment extends Fragment {

		public PlaceholderFragment() {
		}

		@Override
		public View onCreateView(LayoutInflater inflater, ViewGroup container,
				Bundle savedInstanceState) {
			View rootView = inflater.inflate(R.layout.fragment_main, container,
					false);
			Log.i(TAG, "settign setRetainInstance inside the onCreateView of the fragment");
			setRetainInstance(true);
			return rootView;
		}

		@Override
		public void onCreate(Bundle savedInstanceState) {
			// TODO Auto-generated method stub
			super.onCreate(savedInstanceState);
			
			Log.i(TAG, "before setting setRetainInstance to true in the onCreate method of the Fragment");
			setRetainInstance(true);
		}
		
		
	}

}

/*
 * 

//TODO section related 

error stack related to the removal of unregister... in the onDestroy method ... 

04-09 16:22:51.333: E/ActivityThread(21518): Activity com.sirpum.audme.android.MainActivity has leaked IntentReceiver com.sirpum.audme.android.MainActivity$2@41ed3708 that was originally registered here. Are you missing a call to unregisterReceiver()?
04-09 16:22:51.333: E/ActivityThread(21518): android.app.IntentReceiverLeaked: Activity com.sirpum.audme.android.MainActivity has leaked IntentReceiver com.sirpum.audme.android.MainActivity$2@41ed3708 that was originally registered here. Are you missing a call to unregisterReceiver()?
04-09 16:22:51.333: E/ActivityThread(21518): 	at android.app.LoadedApk$ReceiverDispatcher.<init>(LoadedApk.java:805)
04-09 16:22:51.333: E/ActivityThread(21518): 	at android.app.LoadedApk.getReceiverDispatcher(LoadedApk.java:606)
04-09 16:22:51.333: E/ActivityThread(21518): 	at android.app.ContextImpl.registerReceiverInternal(ContextImpl.java:1430)
04-09 16:22:51.333: E/ActivityThread(21518): 	at android.app.ContextImpl.registerReceiver(ContextImpl.java:1410)
04-09 16:22:51.333: E/ActivityThread(21518): 	at android.app.ContextImpl.registerReceiver(ContextImpl.java:1404)
04-09 16:22:51.333: E/ActivityThread(21518): 	at android.content.ContextWrapper.registerReceiver(ContextWrapper.java:467)
04-09 16:22:51.333: E/ActivityThread(21518): 	at com.sirpum.audme.android.MainActivity.setupBluetooth(MainActivity.java:180)
04-09 16:22:51.333: E/ActivityThread(21518): 	at com.sirpum.audme.android.MainActivity.onCreate(MainActivity.java:70)
04-09 16:22:51.333: E/ActivityThread(21518): 	at android.app.Activity.performCreate(Activity.java:5231)
04-09 16:22:51.333: E/ActivityThread(21518): 	at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1087)
04-09 16:22:51.333: E/ActivityThread(21518): 	at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2159)
04-09 16:22:51.333: E/ActivityThread(21518): 	at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2245)
04-09 16:22:51.333: E/ActivityThread(21518): 	at android.app.ActivityThread.access$800(ActivityThread.java:135)
04-09 16:22:51.333: E/ActivityThread(21518): 	at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1196)
04-09 16:22:51.333: E/ActivityThread(21518): 	at android.os.Handler.dispatchMessage(Handler.java:102)
04-09 16:22:51.333: E/ActivityThread(21518): 	at android.os.Looper.loop(Looper.java:136)
04-09 16:22:51.333: E/ActivityThread(21518): 	at android.app.ActivityThread.main(ActivityThread.java:5017)
04-09 16:22:51.333: E/ActivityThread(21518): 	at java.lang.reflect.Method.invokeNative(Native Method)
04-09 16:22:51.333: E/ActivityThread(21518): 	at java.lang.reflect.Method.invoke(Method.java:515)
04-09 16:22:51.333: E/ActivityThread(21518): 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779)
04-09 16:22:51.333: E/ActivityThread(21518): 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595)
04-09 16:22:51.333: E/ActivityThread(21518): 	at dalvik.system.NativeStart.main(Native Method)

	
	
	*/
	


